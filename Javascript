//wasd and arrows
//shift to attack
//1:stone
//2:cloud
//g:goal
//l:lava
//3 and 4:brick
//-:stone background
//_:cloud background
//, and .:brick background
//t:trampoline
//s:supply box
//A and V:spike
//c and C:crate
//signs and teleporters should be in the level functions
var update=true;
var height=0;
var startCoords=[{x:100,y:380},{x:100,y:380},{x:100,y:500}];
levelStartCoords=startCoords[height];
var cloudLevel=false;
var blocks = [];
var levels =[[" 34,.,.,.,.,.,.,.,.,.,.,.,.,43",
              " 34,.,.,.,.,.,.,.,.,.,.,.,.,43",
              " 34,.,.,.,.,.,.,.,.,.,.,.,.,43",
              " 34s.,.,.,.,.,.,.,.,.,.,.,.,43",
              " 34343434343434343434343434343",
              " 34,.,.,.,.3.,.,.,.3.,.,.,.,43",
              " 34,.,.,.,.3.,.,.,.3.,.,.,.,43",
              " 34,.,.,.,.3.,.,.,.3.,.,.,.,43",
              " 34343.,.343.,43434343.,.34343",
              " 34,.,.,.3.,.,.,.,.,.3.,.,.,43",
              " 34,.,.,.3.,.,.,.,.,.,.c.,.,43",
              " 34,.,.,.,.,.c.,.,.,.,.c.,.,43",
              " 34,.,4343434343434343434,.,43",
              " 34,.,.,.,.,.,.3.,.,.,.,.,.,43",
              " 34,.,.,.,.,.,.3.,.,.,.,.,.,43",
              " 34,.,.,.,.,.,.3.,.,.,.,.,.,43",
              " 343434343.,.34343.,.343434343",
              " 34,.,.,.3.,.,.,.,.,.3.,.,.,43",
              " 34,.,.,.,.,.,.,.,.,.,.,.,.,43",
              " 34,.,.,.,.,.,.A.,.,.,.,.,.s43",
              " 34343434343434343434343434343"
],[""]];
var cloudLevels=[[],[],[]];
var extraBlocks=[];
var gravityBlocks=[];
var timer=0;
var isBlock=[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]];
var isHazard=[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]];
var midO;
var collide=function(a,b){
  midO=a;
  if(a.y < b.y + 20 && a.y > b.y + 10 && a.x + 16 > b.x && a.x < b.x + 16&&a.acceleration<0) { 
    midO.y = b.y + 20;
    midO.acceleration = 0;
  }
  if(a.y + 20 > b.y && a.y + 19 < b.y + 10 && a.x + 17 > b.x && a.x < b.x + 17) { 
    midO.y = b.y - 20;
    midO.acceleration = 0;
    midO.jumping = false; 
  }
  if (a.x > b.x + 10 && a.x < b.x + 20 && a.y + 19 > b.y && a.y < b.y + 19) {
    midO.x = b.x + 20; 
  }
  if(a.x + 20 > b.x && a.x + 20 < b.x + 10 && a.y + 19 > b.y && a.y < b.y + 19) { 
    midO.x = b.x - 20; 
  }
  return(midO);
};
var midB=false;
var talkT=0;
var isColliding=function(a,b){
  midB=false;
  if(a.x+20>b.x&&a.x<b.x+20&&a.y+20>b.y&&a.y<b.y+20){
    midB=true;
  }
  /*if(a.y < b.y + 20 && a.y > b.y + 20 && a.x + 20 > b.x && a.x < b.x + 20&&a.acceleration<0) { 
    midB=true;
  }
  if(a.y + 20 > b.y && a.y + 19 < b.y + 10 && a.x + 17 > b.x && a.x < b.x + 17) { 
    midB=true;
  }
  if (a.x > b.x + 10 && a.x < b.x + 20 && a.y + 19 > b.y && a.y < b.y + 19) {
    midB=true;
  }
  if(a.x + 20 > b.x && a.x + 20 < b.x + 10 && a.y + 19 > b.y && a.y < b.y + 19) { 
    midB=true;
  }*/
  return(midB);
};
talkNum=0;
talkNum2=0;
var talkT2=0;
var midTxt1="";
var midTxt2="";
var i=0;
var slowText=function(txt1,txt2){
  midTxt1="";
  midTxt2="";
  if(talkT2<txt1.length*2.5){
    for(i=0;i<Math.floor(talkT2/2.5);i++){
      midTxt1+=txt1[i];
    }
  }else if(talkT2<(txt1.length*2.5)+(txt2.length*2.5)){
    midTxt1=txt1;
    for(i=0;i<Math.floor(talkT2/2.5)-txt1.length;i++){
      midTxt2+=txt2[i];
    }
  }else{
    midTxt1=txt1;
    midTxt2=txt2;
  }
  ctx.fillStyle='rgb(250,250,250)';
  ctx.fillText(midTxt1,canvas.width/4+20,canvas.height-140);
  ctx.fillText(midTxt2,canvas.width/4+20,canvas.height-110);
};
var bidb2=false;
var dialogue=function(txt1,txt2){
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.fillStyle='rgba(50,50,50,0.30)';
  ctx.fillRect(0,0,canvas.width,canvas.height);
  ctx.font = '15px sans-serif';
  ctx.fillStyle= 'rgb(0, 0, 0)';
  ctx.fillText("press z to exit",canvas.width-93,12);
  ctx.fillStyle='rgb(10,10,10)';
  ctx.strokeStyle='rgb(250,250,250)';
  ctx.fillRect(canvas.width/4,canvas.height-180,canvas.width/2,160);
  ctx.lineWidth=4;
  ctx.strokeRect(canvas.width/4,canvas.height-180,canvas.width/2,160);
  ctx.fillText("press c",canvas.width/4+20,canvas.height-187);
  ctx.font = '25px sans-serif';
  ctx.fillStyle='rgb(250,250,250)';
  //ctx.fillText(txt1[talkNum],canvas.width/4+20,canvas.height-140);
  //ctx.fillText(txt2[talkNum],canvas.width/4+20,canvas.height-110);
  if(input.c&&talkNum===talkNum2&&talkNum<txt1.length-1){
    if(talkT2<((txt1[talkNum].length*2.5)+(txt2[talkNum].length*2.5))){
      talkT2=(txt1[talkNum].length*2.5)+(txt2[talkNum].length*2.5)+1;
      talkNum2=-1;
      talkT=25;
    }else{
      talkT=25;
      talkT2=0;
      talkNum++;
    }
  }
  slowText(txt1[talkNum],txt2[talkNum]);
  if(input.c&&talkNum===talkNum2&&!(talkNum<txt1.length-1)){
    if(talkT2<((txt1[talkNum].length*2.5)+(txt2[talkNum].length*2.5))){
      talkT2=(txt1[talkNum].length*2.5)+(txt2[talkNum].length*2.5)+1;
      talkNum2=-1;
      talkT=25;
    }else{
      update=true;
      npc1.talk=false;
      talkNum=0;
    }
  }
  ctx.transform(2,0,0,2,canvas.width/2-player1.x*2,canvas.height/2-player1.y*2);
};
var input = {
  right: false,
  up: false,
  left: false,
  down: false,
  restart: false,
  attack:false,
  x:false,
  z:false,
  c:false,
  e:false,
};
var KEY = {
  D: 68,
  W: 87,
  A: 65,
  S:83,
  RIGHT:39,
  UP:38,
  LEFT:37,
  DOWN:40,
  Q:81,
  R:16,
  X:88,
  Z:90,
  C:67,
  E:69,
};
var txt1=0;
var bannerText=function(txt,x,y){
  //txt1 = ctx.measureText(txt);
  ctx.font = '15px sans-serif';
  ctx.fillStyle= 'rgb(0, 0, 0)';
  ctx.fillText(txt,x+10-txt.length*3,y-10);
};
var interact=false;
var kc=0;
function press(evt) {
  var code = evt.keyCode;
  switch(code) {
    case KEY.RIGHT:
    case KEY.D: input.right = true; if(kc<6||kc>=8){kc=0;} if(kc>=6&&kc<8){kc++;} break;
    case KEY.UP:
    case KEY.W: input.up = true; if(kc>=2){kc=0;} if(kc<2){kc++;} ;break;
    case KEY.LEFT:
    case KEY.A: input.left = true; if(kc<4||kc>=6){kc=0;} if(kc>=4&&kc<6){kc++;} break;
    case KEY.DOWN:
    case KEY.S: input.down = true; if(kc<2||kc>=4){kc=0;} if(kc>=2&&kc<4){kc++;} break;
    case KEY.Q: input.restart = true; kc=0; break;      
    case KEY.R: input.attack = true; kc=0; break;
    case KEY.X: input.x = true; if(kc<8||kc>=9){kc=0;} if(kc<=8&&kc<9){kc++;} break;
    case KEY.Z: input.z = true; if(kc<9||kc>=10){kc=0;} if(kc<=9&&kc<10){kc++;} break;
    case KEY.C: input.c = true; kc=0; break;
    case KEY.E: input.e = true; kc=0; break;
    case KEY.X: interact = true; kc=0; break;
  }
}
var n1="right";
function release(evt) {
  var code = evt.keyCode;
  switch(code) {
    case KEY.RIGHT:
    case KEY.D: input.right = false; break;
    case KEY.UP:
    case KEY.W: input.up = false; break;
    case KEY.LEFT:
    case KEY.A: input.left = false; break;
    case KEY.DOWN:
    case KEY.S: input.down = false; break;
    case KEY.Q: input.restart = false; break;
    case KEY.R: input.attack = false; break;
    case KEY.X: input.x = false; break;
    case KEY.Z: input.z = false; break;
    case KEY.C: input.c = false; break;
    case KEY.E: input.e = false; break;
  }
}
var boxRect=function(x,y,w,h){
  ctx.strokeStyle='rgb(250,250,250)';
  ctx.fillStyle='rgb(20,20,20)';
  ctx.lineWidth=4;
  ctx.fillRect(x,y,w,h);
  ctx.strokeRect(x,y,w,h);
};
var midNums=[];
var inventoryf=function(){
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.fillStyle='rgba(50,50,50,0.3)';
  ctx.fillRect(0,0,canvas.width,canvas.height);
  boxRect(canvas.width/6,canvas.height/6,2*canvas.width/3,2*canvas.height/3);
  ctx.fillStyle= 'rgb(0, 0, 0)';
  ctx.font = '15px sans-serif';
  ctx.fillText("press z to exit",canvas.width-93,12);
  midNums[0]=Math.floor((canvas.width-20)/(3*80));
  midNums[1]=Math.floor((canvas.height-20)/(3*80));
  for(i=0;i<16;i++){
    boxRect(canvas.width/6+80*(i%midNums[0])+20,canvas.height/6+80*Math.floor(i/midNums[0])+20,60,60);
  }
  ctx.transform(2,0,0,2,canvas.width/2-player1.x*2,canvas.height/2-player1.y*2);
};//^^vv<<>>xz
var hpBar=function(x1,y1,hp1,max1){
  ctx.fillStyle='rgb(255,0,0)';
  if(hp1/max1>0.25&&hp1/max1<0.5){
    ctx.fillStyle='rgb(128,0,0)';
  }else if(hp1/max1>0.5&&hp1/max1<0.76){
    ctx.fillStyle='rgb(0,128,0)';
  }else if(hp1/max1>0.75){
    ctx.fillStyle='rgb(0,255,0)';
  }
  ctx.fillRect(x1-2,y1-4,24*(hp1/max1),2);
};
var level=levels[height];
var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');
var player = function(x, y) { 
  this.x = x;
  this.y = y;
  this.acceleration = 0;
  this.jumping = true;
  this.direction="right";
  this.attacking=false;
  this.inventory=false;
  this.hp=20;
  this.ammo=10;
  this.maxHp=20;
  this.respawn=function(x1,y1){
    this.x = x1;
    this.y = y1;
    this.acceleration=0;
    this.hp=this.maxHp;
    this.ammo=10;
    cloudLevel=false;
    reload();
  };
  this.sightDistance=200;
  this.items=[];
};
var flyEnemy = function(x, y,t) { 
  this.x = x;
  this.y = y;
  this.acceleration = 0;
  this.jumping = true;
  this.direction="right";
  this.attacking=false;
  this.hp=10;
  this.ammo=10;
  this.t=t;
  this.jump;
  this.left;
  this.right;
  this.xeleration=0;
  this.move=true;
  this.dice=function(){
    this.x=-200;
    this.hp=10;
    this.xeleration=0;
    this.move=false;
  };
  this.interact=false;
  this.AI=true;
};
var npc = function(x, y,t,talk) { 
  this.x = x;
  this.y = y;
  this.acceleration = 0;
  this.jumping = true;
  this.direction="right";
  this.attacking=false;
  this.hp=20;
  this.ammo=10;
  this.t=t;
  this.jump;
  this.left;
  this.right;
  this.move=true;
  this.opinion=1;
  this.dice=function(){
    this.x=-200;
    this.hp=20;
    this.move=false;
    this.opinion=0;
  };
  this.interact=false;
  this.talk=talk;
  this.dialogue1=["Hello, world!"];
  this.dialogue2=[""];
};
var attackObj=function(x,y,d,index){
  this.x=x;
  this.y=y;
  this.direction=d;
  this.index=index;
  this.acceleration=0;
};
var blank=function(){
  this.is=true;
};
blank.prototype.display=function(){};
attackObj.prototype.display=function(){
  ctx.fillStyle= 'rgb(190,10,10)';
  ctx.fillRect(this.x, this.y, 5, 5);
  if(this.direction==="left"){
    this.x-=7;
  }
  if(this.direction==="right"){
    this.x+=7;
  }
  this.acceleration+=0.02;
  this.y+=this.acceleration;
  if(this.x<0||this.x>canvas.width||this.y>canvas.height||this.y<0){
    blocks[this.index-1]=new blank(-20,-20,0);
  }
  if(isBlock[Math.floor((this.y+3)/20)][Math.floor((this.x+3)/20)]){
    blocks[this.index-1]=new blank(-20,-20,0);
  }
  if(isColliding(npc1,this)){
    npc1.hp--;
    blocks[this.index-1]=new blank(-20,-20,0);
    npc1.opinion--;
  }
  for(var i=0;i<gravityBlocks.length;i++){
    if(isColliding(gravityBlocks[i],this)){
      blocks[this.index-1]=new blank(-20,-20,0);
    }
  }
  if(isColliding(fly1,this)){
    fly1.hp--;
    blocks[this.index-1]=new blank(-20,-20,0);
  }
};
var cloudLevel2=false;
player.prototype.display = function() { 
  ctx.fillStyle= 'rgb(20, 20, 20)';
  ctx.fillRect(this.x, this.y, 20, 20);
  hpBar(this.x,this.y,this.hp,this.maxHp);
  if(update){
    if (this.y>canvas.height-20) {this.y=canvas.height-20;
      this.acceleration = 0;
      this.jumping = false; }
    if (input.up && !this.jumping) { this.acceleration = -5.4;
      this.jumping = true; }
    if (input.left) { this.x -= 3; this.direction="left";}
    if (input.right) { this.x += 3; this.direction="right";}
    if(input.attack){
      this.attacking=true;
      if(this.ammo>0&&timer%5===0){
        blocks.push(new attackObj(this.x+10,this.y+5,this.direction,blocks.length+1));
        this.ammo--;
      }
      this.attacking=false;
    }
    this.acceleration+=0.17;
    this.y+=this.acceleration;
    if(input.restart){
      reload();
      input.restart=false;
    }
    if(this.x<0){
      this.x=0;
    }
    if(this.x>canvas.width-20){
      this.x=canvas.width-20;
    }
    if(this.y>canvas.height&&!cloudLevel){
      this.y=canvas.height;
    }else if(this.y>canvas.height-21&&height>0){
      this.y=0;
      height--;
      reload(0);
    }
    if(this.y<0){
      this.y=canvas.height;
      height++;
      cloudLevel=true;
      reload(0);
    }
    if(this.attacking=true){

    }
    if(kc===10){
      this.hp=9999;
      this.ammo=9999;
      kc=0;
    }
  }
  if(input.e){
    this.inventory=true;
    update=false;
    reload(0);
  }
  if(this.inventory){
    inventoryf();
    if(input.z){
      update=true;
      reload(0);
      this.inventory=false
    }
  }
  if(this.hp<=0){
    this.respawn(startCoords[height].x,startCoords[height].y);
  }
  this.hp=Math.round(this.hp*100)/100;
  this.x=Math.round(this.x);
  this.x=Math.round(this.x);
};
npc.prototype.display = function() { 
  ctx.fillStyle= 'rgb(60, 40, 0)';
  ctx.fillRect(this.x, this.y, 20, 20);
  if(Math.sqrt((this.x-player1.x)*(this.x-player1.x)+(this.y-player1.y)*(this.y-player1.y))<player1.sightDistance){
    hpBar(this.x,this.y,this.hp,20);
  }
  if(update){
    if(this.opinion<0){
      this.attacking=true;
      this.left=false;
      this.right=true;
      this.jump=false;
      this.move=false;
      if(this.x>player1.x){
        this.x -= 2.5;
        this.direction="left";
      }
      if(this.x<player1.x){
        this.x += 2.5;
        this.direction="right";
      }
      if(this.y>player1.y&&!this.jumping){
        this.acceleration = -5.4;
        this.jumping = true;
      }
    }else{
      this.attacking=false;
    }
    if(this.attacking===true){
      ctx.fillStyle='rgb(190,190,190)';
      if(this.opinion>=0){
        this.attacking=false;
      }
      if(this.direction==="right"){
        ctx.fillRect(this.x+17,this.y+5,10,5);
        if(player1.x+20>this.x+17&&player1.x<this.x+27&&player1.y+20>this.y+5&&player1.y<this.y+10){
          player1.hp-=0.5;
        }
        if(fly1.x+20>this.x+17&&fly1.x<this.x+27&&fly1.y+20>this.y+5&&fly1.y<this.y+10){
          fly1.hp-=0.5;
        }
      }else{
        ctx.fillRect(this.x-7,this.y+5,10,5);
        if(player1.x+20>this.x-7&&player1.x<this.x+3&&player1.y+20>this.y+5&&player1.y<this.y+10){
          player1.hp-=0.25;
        }
        if(fly1.x+20>this.x-7&&fly1.x<this.x+3&&fly1.y+20>this.y+5&&fly1.y<this.y+10){
          fly1.hp-=0.25;
        }
      }
    }
    this.acceleration+=0.17;
    this.y+=this.acceleration;
    if(this.move){
      if (this.jump && !this.jumping) {
        this.acceleration = -5.4;
        this.jumping = true;
      }
      if (this.left) {
        this.x -= 2;
        this.direction="left";
      }
      if (this.right) {
        this.x += 2;
        this.direction="right";
      }
      if(this.x<0){
        this.x=0;
      }
      if(this.x>canvas.width-20){
        this.x=canvas.width-20;
      }
    }
    if(this.hp<=0){
      this.dice();
    }
  }
  if(isColliding(player1,this)&&this.opinion>0){
    bannerText("press x",this.x,this.y);
    if(input.x){
      update=false;
      talkT2=0;
      this.talk=true;
    }
  }
  this.hp=Math.round(this.hp*100)/100;
  if(this.talk){
    dialogue(this.dialogue1,this.dialogue2);
    if(input.z){
      update=true;
      this.talk=false;
      talkNum=0;
    }
  }
};
flyEnemy.prototype.display = function() { 
  ctx.fillStyle= 'rgb(190, 80, 0)';
  ctx.fillRect(this.x, this.y, 20, 20);
  if(Math.sqrt((this.x-player1.x)*(this.x-player1.x)+(this.y-player1.y)*(this.y-player1.y))<player1.sightDistance){
    hpBar(this.x,this.y,this.hp,10);
  }
  if(update){
    if(this.attacking=true){

    }
    this.acceleration+=0.17;
    if(this.xeleration>0){
      this.xeleration-=0.17;
    }
    if(this.xeleration<0){
      this.xeleration+=0.17;
    }
    this.x+=this.xeleration;
    if(this.move){
      if(!this.AI){
        if (this.jump) {
          this.acceleration = -2;
          this.jumping = true;
        }
        if (this.left) {
          this.xeleration = -2;
          this.direction="left";
        }
        if (this.right) {
          this.xeleration = 2;
          this.direction="right";
        }
      }
      if(this.AI){
        if(player1.x>this.x){
          this.xeleration=2;
        }
        if(player1.x<this.x){
          this.xeleration=-2;
        }
        if(player1.y<this.y){
          this.acceleration =-2;
        }
        if(this.acceleration>5){
          this.acceleration =-1;
        }
      }
      if(this.x<0){
        this.x=0;
      }
      if(this.x>canvas.width-20){
        this.x=canvas.width-20;
      }
    }
    if(this.hp<=0){
      this.dice();
      npc1.opinion++;
    }
    this.y+=this.acceleration;
  }
  if(isColliding(player1,this)){
    player1.hp-=0.5;
  }
  if(isColliding(npc1,this)){
    npc1.hp-=0.5;
  }
  this.hp=Math.round(this.hp*100)/100;
};
var player1=new player(0, 380);
var fly1=new flyEnemy(600, 80);
var npc1=new npc(200,380,0);
var block=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var crate=function(x,y,t) {//Isn't it just CRATE?
  this.x=x;
  this.y=y;
  this.t=t;
  this.acceleration=0;
};
var supply=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var trampoline=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var spike=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var teleporter=function(x,y,t,xt,yt) { 
  this.x=x;
  this.y=y;
  this.t=t;
  this.xt=xt;
  this.yt=yt;
};
var wall=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var lava=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var goal=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var sign=function(x,y,t,txt) { 
  this.x=x;
  this.y=y;
  this.t=t;
  this.txt=txt;
};
lava.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(200, 20, 20)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(210, 20, 20)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(200, 20, 20)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(210, 20, 20)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillRect(this.x, this.y+10, 10, 10);
  }
  if(isColliding(player1,this)) { 
    player1.respawn(startCoords[height].x,startCoords[height].y); 
  }
  if(isColliding(npc1,this)) { 
    npc1.hp=0;
  }
  if(isColliding(fly1,this)) { 
    fly1.hp=0;
  }
};
spike.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(200, 200, 200)';
    ctx.fillRect(this.x+5, this.y, 5, 10);
    ctx.fillRect(this.x, this.y+10, 5, 10);
    ctx.fillStyle='rgb(170, 170, 170)';
    ctx.fillRect(this.x+5, this.y+10, 10, 10);
    ctx.fillStyle='rgb(200, 200, 200)';
    ctx.fillRect(this.x+5, this.y, 5, 10);
    ctx.fillRect(this.x, this.y+10, 5, 10);
    ctx.fillStyle='rgb(170, 170, 170)';
    ctx.fillRect(this.x+5, this.y+10, 10, 10);
  }
  if(update){
    if(isColliding(player1,this)) { 
      player1.hp-=0.5;
      if(player1.acceleration>2&&player1.acceleration<=10){
        player1.acceleration=player1.acceleration*-0.75;
      }
      player1.hp-=Math.abs(player1.acceleration);
    }
    if(isColliding(npc1,this)) { 
      npc1.hp-=0.5;
      if(npc1.acceleration>2&&npc1.acceleration<=10){
        npc1.acceleration=npc1.acceleration*-0.75;
      }
      npc1.hp-=Math.abs(npc1.acceleration);
    }
    if(isColliding(fly1,this)) { 
      fly1.hp-=0.5;
      if(fly1.acceleration>2&&fly1.acceleration<=10){
        fly1.acceleration=fly1.acceleration*-0.75;
      }
      fly1.hp-=Math.abs(fly1.acceleration);
    }
  }
};
sign.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(50, 30, 0)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(40, 24, 0)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(50, 30, 0)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(40, 24, 0)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillRect(this.x, this.y+10, 10, 10);
  }
  if(isColliding(player1,this)) {
    bannerText(this.txt,this.x,this.y);
  }
  else if(player1.x>this.x-20&&player1.x<this.x+20&&player1.y>this.y-20&&player1.y<this.y+20){
    bannerText(this.txt,this.x,this.y);
  }
};
goal.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(0, 200, 100)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(0, 200, 130)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(0, 190, 90)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(0, 200, 100)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(0, 200, 130)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(0, 190, 90)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(isColliding(player1,this)&&height===levelNum2) { 
    height++; 
  }
};
trampoline.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(20, 65, 65)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(18, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(12, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(17, 65, 65)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(20, 65, 65)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(18, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(12, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(17, 65, 65)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(update){
    if(isColliding(player1,this)) {
      player1.acceleration =Math.abs(player1.acceleration)*-1.025;
      player1.jumping = true; 
    }
    if(isColliding(npc1,this)) {
      npc1.acceleration =Math.abs(npc1.acceleration)*-1.025;
      npc1.jumping = true; 
    }
    if(isColliding(fly1,this)) {
      fly1.acceleration =Math.abs(fly1.acceleration)*-1.025;
      fly1.jumping = true; 
    }
  }
};
supply.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(150, 0, 0)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(200, 200, 200)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(150, 0, 0)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(200, 200, 200)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
  }
  if(isColliding(player1,this)) {
    if(player1.ammo<50){
      player1.ammo=50;
    }
    if(player1.maxHp>player1.hp){
      player1.hp=player1.maxHp;
    }
  }
  if(isColliding(npc1,this)) {
    npc1.ammo=50;
    npc1.hp=20;
  }
};
teleporter.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(150, 200, 20)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(90, 180, 40)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(150, 200, 20)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(90, 180, 40)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
  }
  if(isColliding(player1,this)) {
    bannerText("press x",this.x,this.y);
    if(input.x){
      player1.x=this.xt;
      player1.y=this.yt;
    }
  }
  if(isColliding(npc1,this)&&npc1.interact) {
    npc1.x=this.xt;
    npc1.y=this.yt;
  }
};
crate.prototype.display = function() {//CRATE, just CRATE, isn't it?
  if(this.t===0){//different textures
    ctx.fillStyle='rgb(100, 50, 0)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(120, 60, 0)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(100, 50, 0)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(120, 60, 0)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(100, 50, 0)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(120, 60, 0)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(100, 50, 0)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(120, 60, 0)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    
  }
  this.acceleration+=0.17;
  this.y+=this.acceleration;
  player1=collide(player1,this);
  npc1=collide(npc1,this);
  fly1=collide(fly1,this);
  if(player1.y>this.y-19&&player1.y<this.y+20&&player1.x+21>this.x&&player1.x<this.x+21){
    if(player1.x<this.x+10&&(isBlock[Math.floor(this.y/20)][Math.floor(this.x/20)])===false&&input.right){
      this.x++;
    }else if((isBlock[Math.floor(this.y/20)][Math.floor(this.x/20)+1])===false&&input.left){
      this.x--;
    }
  }
  if(player1.y>this.y-19&&player1.y<this.y+20&&player1.x+22>this.x&&player1.x<this.x+22&&(isBlock[Math.floor(this.y/20)-1][Math.floor(this.x/20)-0])===false&&update){
    if(player1.x<this.x+10&&(isBlock[Math.floor(this.y/20)][Math.floor(this.x/20)-2])===false&&(isBlock[Math.floor(this.y/20)-1][Math.floor(this.x/20)-2])===false&&(isBlock[Math.floor(this.y/20)-1][Math.floor(this.x/20)-1])===false&&(isBlock[Math.floor(this.y/20)-1][Math.floor(this.x/20)+1])===false){
      if(input.x){
        this.x-=43;
      }
      bannerText("press x",this.x,this.y);
    }else if((isBlock[Math.floor(this.y/20)][Math.floor(this.x/20)+3])===false&&(isBlock[Math.floor(this.y/20)-1][Math.floor(this.x/20)+3])===false&&(isBlock[Math.floor(this.y/20)-1][Math.floor(this.x/20)+2])===false&&(isBlock[Math.floor(this.y/20)-1][Math.floor(this.x/20)+1])===false&&player1.x>this.x+10){
      if(input.x){
        this.x+=43;
      }
      bannerText("press x",this.x,this.y);
    }
  }
  if(npc1.y>this.y-19&&npc1.y<this.y+20&&npc1.x+21>this.x&&npc1.x<this.x+21){
    if(npc1.x<this.x+10&&(isBlock[Math.floor(this.y/20)][Math.floor(this.x/20)])===false){
      this.x++;
    }else if((isBlock[Math.floor(this.y/20)][Math.floor(this.x/20)+1])===false){
      this.x--;
    }
  }
  for (var i = 0;i < gravityBlocks.length; i++) {
    gravityBlocks[i]=collide(gravityBlocks[i],this);
  }
};
wall.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(70, 70, 70)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(58, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(62, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(67, 67, 67)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(70, 70, 70)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(58, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(62, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(67, 67, 67)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===1){
    ctx.fillStyle='rgb(230, 240, 240)';
    ctx.fillRect(this.x,this.y,10,10);
    ctx.fillStyle='rgb(240, 245, 245)';
    ctx.fillRect(this.x,this.y+10,10,10);
    ctx.fillRect(this.x+10,this.y,10,10);
    ctx.fillStyle='rgb(240, 250, 250)';
    ctx.fillRect(this.x+10,this.y+10,10,10);
    ctx.fillStyle='rgb(230, 240, 240)';
    ctx.fillRect(this.x,this.y,10,10);
    ctx.fillStyle='rgb(240, 245, 245)';
    ctx.fillRect(this.x,this.y+10,10,10);
    ctx.fillRect(this.x+10,this.y,10,10);
    ctx.fillStyle='rgb(240, 250, 250)';
    ctx.fillRect(this.x+10,this.y+10,10,10);
  }
  if(this.t===2){
    ctx.fillStyle='rgb(167, 142, 60)';
    ctx.fillRect(this.x,this.y,20,10);
    ctx.fillStyle='rgb(166, 137, 40)';
    ctx.fillRect(this.x,this.y+10,10,10);
    ctx.fillStyle='rgb(175, 144, 60)';
    ctx.fillRect(this.x+10,this.y+10,10,10);
    ctx.fillStyle='rgb(167, 142, 60)';
    ctx.fillRect(this.x,this.y,20,10);
    ctx.fillStyle='rgb(166, 137, 40)';
    ctx.fillRect(this.x,this.y+10,10,10);
    ctx.fillStyle='rgb(175, 144, 60)';
    ctx.fillRect(this.x+10,this.y+10,10,10);
  }
  if(this.t===3){
    ctx.fillStyle='rgb(165, 133, 40)';
    ctx.fillRect(this.x,this.y,20,10);
    ctx.fillStyle='rgb(175, 144, 60)';
    ctx.fillRect(this.x,this.y+10,10,10);
    ctx.fillStyle='rgb(166, 137, 40)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(165, 133, 40)';
    ctx.fillRect(this.x,this.y,20,10);
    ctx.fillStyle='rgb(175, 144, 60)';
    ctx.fillRect(this.x,this.y+10,10,10);
    ctx.fillStyle='rgb(166, 137, 40)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  ctx.fillStyle='rgba(50,50,50,0.30)';
  ctx.fillRect(this.x-0.5,this.y-0.5,20,20);
  ctx.fillStyle='rgba(50,50,50,0.30)';
  ctx.fillRect(this.x-0.5,this.y-0.5,20,20);
}
block.prototype.display = function() { 
  if(this.t===0){//different textures
    ctx.fillStyle='rgb(70, 70, 70)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(58, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(62, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(67, 67, 67)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(70, 70, 70)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(58, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(62, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(67, 67, 67)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===1){
    ctx.fillStyle='rgb(230, 240, 240)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(240, 245, 245)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(240, 250, 250)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(230, 240, 240)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(240, 245, 245)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(240, 250, 250)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===2){
    ctx.fillStyle='rgb(167, 142, 60)';
    ctx.fillRect(this.x, this.y, 20, 10);
    ctx.fillStyle='rgb(166, 137, 40)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(175, 144, 60)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(167, 142, 60)';
    ctx.fillRect(this.x, this.y, 20, 10);
    ctx.fillStyle='rgb(166, 137, 40)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(175, 144, 60)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===3){
    ctx.fillStyle='rgb(165, 133, 40)';
    ctx.fillRect(this.x, this.y, 20, 10);
    ctx.fillStyle='rgb(175, 144, 60)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(166, 137, 40)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(165, 133, 40)';
    ctx.fillRect(this.x, this.y, 20, 10);
    ctx.fillStyle='rgb(175, 144, 60)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(166, 137, 40)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  player1=collide(player1,this);
  npc1=collide(npc1,this);
  fly1=collide(fly1,this);
  for (var i = 0;i < gravityBlocks.length; i++) {
    gravityBlocks[i]=collide(gravityBlocks[i],this);
  }
  //npc2=collide(npc2,this);
  //npc3=collide(npc3,this);
  //npc4=collide(npc4,this);
};
//var npc2=new npc(-20,380,0);
//var npc3=new npc(-20,380,0);
//var npc4=new npc(-20,380,0);
var mouseX;
var mouseY;
function mouseMoveHandler(e) {
  mouseX = e.clientX - canvas.offsetLeft;
  mouseY = e.clientY - canvas.offsetTop;
}
document.addEventListener("mousemove", mouseMoveHandler, false);
/*=======================================================================*/
var levelFunctions=[
function(a){//level specific functions to be run on reload
  if(isNaN(a)){
    npc1.y=320;
    npc1.x=60;
    fly1.x=400;
    fly1.y=100;
    npc1.move=true;
    fly1.move=true;
  }
  blocks.push(new sign(60,380,0,"test"));
  blocks.push(new teleporter(280,60,0,300,140));
  blocks.push(new teleporter(280,140,0,300,60));
  npc1.dialogue1=["Hello","My job is to walk back and forth in this","I'm very bored"];
  npc1.dialogue2=[" ","spot"," "];
  npc1.right=true;
  if(midB){
    
    //npc1.left=true;
    //npc1.jump=true;//jgdkjgdhjmmtrdjfvuyftyibkytfyrdkjh
    midB=false;//jkyegkhjryghkmjymkyd
  }
},function(){},function(){},function(){},function(){},function(){}];
var reload=function(a){
  blocks = [];
  extraBlocks=[];
  gravityBlocks=[];
  for (var y = 0;y < level.length; y++) {
    for (var x = 0;x < level[y].length; x++) {
      isBlock[y][x]=false;
      isHazard[y][x]=false;
      if (level[y][x]==="1") { 
        blocks.push(new block(x*20,y*20,0)); 
        isBlock[y][x]=true;
      }else if(level[y][x]==="2"){
        blocks.push(new block(x*20,y*20,1));
        isBlock[y][x]=true;
      }else if(level[y][x]==="l"){
        blocks.push(new lava(x*20,y*20,0));
        isBlock[y][x]=true;
        isHazard[y][x]=true;
      }else if(level[y][x]==="g"){
        blocks.push(new goal(x*20,y*20,0));
        isBlock[y][x]=true;
      }else if(level[y][x]==="3"){
        blocks.push(new block(x*20,y*20,2));
        isBlock[y][x]=true;
      }else if(level[y][x]==="4"){
        blocks.push(new block(x*20,y*20,3));
        isBlock[y][x]=true;
      }else if(level[y][x]==="-"){
        blocks.push(new wall(x*20,y*20,0));
      }else if(level[y][x]==="_"){
        blocks.push(new wall(x*20,y*20,1));
      }else if(level[y][x]===","){
        blocks.push(new wall(x*20,y*20,2));
      }else if(level[y][x]==="."){
        blocks.push(new wall(x*20,y*20,3));
      }else if(level[y][x]==="t"){
        blocks.push(new trampoline(x*20,y*20,0));
        isBlock[y][x]=true;
      }else if(level[y][x]==="s"){
        blocks.push(new supply(x*20,y*20,0));
      }else if(level[y][x]==="c"){
        blocks.push(new wall(x*20,y*20,2));
        gravityBlocks.push(new crate(x*20,y*20,0));
      }else if(level[y][x]==="C"){
        blocks.push(new wall(x*20,y*20,3));
        gravityBlocks.push(new crate(x*20,y*20,0));
      }else if(level[y][x]==="A"){
        blocks.push(new wall(x*20,y*20,2));
        extraBlocks.push(new spike(x*20,y*20,0));
        isHazard[y][x]=true;
      }else if(level[y][x]==="V"){
        blocks.push(new wall(x*20,y*20,3));
        extraBlocks.push(new spike(x*20,y*20,0));
        isHazard[y][x]=true;
      }
    }
  }
  npc1.acceleration=0;
  fly1.xeleration=0;
  fly1.acceleration=0;
  //blocks.push(npc1);
  //blocks.push(npc2);
  //blocks.push(npc3);
  //blocks.push(npc4);
  midb=true;
  kc=0;
  levelFunctions[height](a);
  //levelFunctions[0];
  if(isNaN(a)){
    player1.x=levelStartCoords.x;
    player1.y=levelStartCoords.y;
    player1.acceleration = 0;
    player1.hp=20;
    player1.ammo=10;
    npc1.hp=20;
    npc1.move=true;
    npc1.opinion=1;
    fly1.move=true;
    fly1.hp=10;
  }
}
reload();
var levelNum2=height;
draw = function() { 
  //ctx.translate(player1.x,player1.y);
  var canvas = document.getElementById('canvas');
  var ctx = canvas.getContext('2d');
  ctx.clearRect(0,0,canvas.width,canvas.height);
  ctx.transform(2,0,0,2,canvas.width/2-player1.x*2,canvas.height/2-player1.y*2);
  if(height!==levelNum2){
    level=levels[height];
    levelStartCoords.x=startCoords[height].x;
    levelStartCoords.y=startCoords[height].y;
    levelNum2=height;
    reload(1);
  }
  if(height===0){
    ctx.clearRect(0,0,canvas.width,canvas.height);
  }else{
    ctx.clearRect(0,0,canvas.width,canvas.height);
  }
  for (var i = 0;i < blocks.length; i++) {
    blocks[i].display();
  }
  for (var i = 0;i < extraBlocks.length; i++) {
    extraBlocks[i].display();
  }
  for (var i = 0;i < gravityBlocks.length; i++) {
    gravityBlocks[i].display();
  }
  ctx.font = '10px sans-serif';//11b+11b+11b+3b=19.61
  ctx.fillText(input.restart,2,10);//3b+3b+3b+11b=19.99
  ctx.fillText(player1.hp,2,20);//small fall+small fall+small fall+run=
  ctx.fillText(npc1.opinion,2,30);
  ctx.fillText(kc,2,40);
  ctx.fillText(mouseX,2,50);
  ctx.fillText(mouseY,2,60);
  ctx.fillText(height,2,70);
  npc1.display();
  fly1.display();
  player1.display();
  if(height===0){
    if(npc1.x<61){
      n1="right"
    }else if(npc1.x>520){
      n1="left";
    }
    if(npc1.x>240&&npc1.x<300){
      npc.jump=true;
    }else{
      npc1.jump=false;
    }
    if(n1==="right"){
      npc1.left=false;
      npc1.right=true;
    }else if(n1==="left"){
      npc1.right=false;
      npc1.left=true;//hop:3.63 jump:10.15 1 bounce:10.13 2:5.04 3:5.03 run:6
//fall:6.43 4:5.04 5:5.03 6:5.04 7:5.03 8:9.91 9:9.89 10:4.91 11:4.9 12:4.91
//13:4.9 14:4.91 15:4.9 16:4.65 small fall:2.41 small bounce:3.53 
    }//hop+jump+run=19.78 (order matters)
  }//2b+2b+8b=19.99
  interact=false;
  talkT--;
  if(talkT<=0){
    talkNum2=talkNum;
    talkT=25;
  }else{
    talkT--;
  }
  //reload();
  //height=0;//khdsyuhgffgkthgswfsghdfnty
  talkT2++;
  timer++;//iyrteahsjytufkg,ykmngv
  //ctx.translate(-player1.x,-player1.y);
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  window.requestAnimationFrame(draw);
};
window.requestAnimationFrame(draw);
