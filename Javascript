//wasd and arrows
//shift to attack
//1:stone
//2:cloud
//g:goal
//l:lava
//3 and 4:brick
//-:stone background
//_:cloud background
//, and .:brick background
//t:trampoline
//s:supply box
var levelNum=0;
var startCoords=[{x:0,y:380},{x:0,y:80},{x:0,y:500}];
levelStartCoords=startCoords[levelNum];
var cloudLevel=false;
var blocks = [];
var height=0;
var levels =[[",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,4,.,.,.,.,.3",
              ",.,.,.,.,.,.,.3",
              ",.,.,.,t,.,.,s3",
              "343434343434343"]];
var cloudLevels=[[],[],[]];
var levelFunctions=[function(){
  if(!cloudLevel){
    
  }
},function(){},function(){},function(){},function(){},function(){}];
var timer=0;
var isBlock=[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]];
var input = {
  right: false,
  up: false,
  left: false,
  down: false,
  restart: false,
  attack:false,
};
var KEY = {
  D: 68,
  W: 87,
  A: 65,
  S:83,
  RIGHT:39,
  UP:38,
  LEFT:37,
  DOWN:40,
  Q:81,
  R:16
};
var bannerText=function(txt,x,y){
  let text1 = ctx.measureText(txt);
  ctx.font = '15px sans-serif';
  ctx.fillStyle= 'rgb(0, 0, 0)';
  ctx.fillText(txt,x+10-(text1.width/2),y-10);
};
function press(evt) {
  var code = evt.keyCode;
    switch(code) {
      case KEY.RIGHT:
      case KEY.D: input.right = true; break;

      case KEY.UP:
      case KEY.W: input.up = true; break;

      case KEY.LEFT:
      case KEY.A: input.left = true; break;

      case KEY.DOWN:
      case KEY.S: input.down = true; break;

      case KEY.Q: input.restart = true; break;
      
      case KEY.R: input.attack = true; break;
    }
  }
function release(evt) {
  var code = evt.keyCode;
  switch(code) {
    case KEY.RIGHT:
    case KEY.D: input.right = false; break;
    case KEY.UP:
    case KEY.W: input.up = false; break;
    case KEY.LEFT:
    case KEY.A: input.left = false; break;
    case KEY.DOWN:
    case KEY.S: input.down = false; break;
    case KEY.Q: input.restart = false; break;
    case KEY.R: input.attack = false; break;
  }
}
var level=levels[levelNum];
var canvas = document.getElementById('canvas');
var ctx = canvas.getContext('2d');
var player = function(x, y) { 
  this.x = x;
  this.y = y;
  this.acceleration = 0;
  this.jumping = true;
  this.direction="right";
  this.attacking=false;
  this.hp=20;
  this.ammo=10;
};
var attackObj=function(x,y,d,index){
  this.x=x;
  this.y=y;
  this.direction=d;
  this.index=index;
  this.acceleration=0;
};
var blank=function(){
  this.is=true;
};
blank.prototype.display=function(){};
attackObj.prototype.display=function(){
  ctx.fillStyle= 'rgb(190,10,10)';
  ctx.fillRect(this.x, this.y, 5, 5);
  if(this.direction==="left"){
    this.x-=7;
  }
  if(this.direction==="right"){
    this.x+=7;
  }
  this.acceleration+=0.02;
  this.y+=this.acceleration;
  if(this.x<0||this.x>canvas.width||this.y>canvas.height||this.y<0){
    blocks[this.index-1]=new blank(-20,-20,0);
  }
  if(isBlock[Math.floor((this.y+3)/20)][Math.floor((this.x+3)/20)]){
    blocks[this.index-1]=new blank(-20,-20,0);
  }
};
var cloudLevel2=false;
player.prototype.display = function() { 
  this.respawn=function(x1,y1){
    this.x = x1;
    this.y = y1;
    this.acceleration=0;
    cloudLevel=false;
  };
  ctx.fillStyle= 'rgb(20, 20, 20)';
  ctx.fillRect(this.x, this.y, 20, 20);
  if (this.y>canvas.height-20) {this.y=canvas.height-20;
    this.acceleration = 0;
    this.jumping = false; }
  if (input.up && !this.jumping) { this.acceleration = -5;
    this.jumping = true; }
  if (input.left) { this.x -= 3; this.direction="left";}
  if (input.right) { this.x += 3; this.direction="right";}
  if(input.attack){
    this.attacking=true;
    if(this.ammo>0&&timer%5===0){
      blocks.push(new attackObj(this.x+10,this.y+5,this.direction,blocks.length+1));
      this.ammo--;
    }
    this.attacking=false;}
  this.acceleration+=0.17;
  this.y+=this.acceleration;
  if(input.restart){
    reload();
    input.restart=false;
  }
  if(this.x<0){
    this.x=0;
  }
  if(this.x>canvas.width-20){
    this.x=canvas.width-20;
  }
  if(this.y>canvas.height&&!cloudLevel){
    this.y=canvas.height;
  }else if(this.y>canvas.height-21&&cloudLevel){
    this.y=0;
    cloudLevel=false;
    height--;
  }
  if(this.y<0){
    this.y=canvas.height;
    height++;
    cloudLevel=true;
  }
  if(this.attacking=true){
    
  }
};
var player1=new player(0, 380);
var block=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var supply=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var trampoline=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var wall=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var wall=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var lava=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var goal=function(x,y,t) { 
  this.x=x;
  this.y=y;
  this.t=t;
};
var sign=function(x,y,t,txt) { 
  this.x=x;
  this.y=y;
  this.t=t;
  this.txt=txt;
};
lava.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(200, 20, 20)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(210, 20, 20)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillRect(this.x, this.y+10, 10, 10);
  }
  if (player1.x > this.x + 10 && player1.x < this.x + 20 && player1.y + 19 > this.y && player1.y < this.y + 19) {
    player1.respawn(levelStartCoords.x,levelStartCoords.y); 
  }
  if(player1.x + 20 > this.x && player1.x + 20 < this.x + 10 && player1.y + 19 > this.y && player1.y < this.y + 19) { 
    player1.respawn(levelStartCoords.x,levelStartCoords.y); 
  }
  if(player1.y < this.y + 20 && player1.y > this.y + 10 && player1.x + 20 > this.x && player1.x < this.x + 20) { 
    player1.respawn(levelStartCoords.x,levelStartCoords.y); 
  }
  if(player1.y + 20 > this.y && player1.y + 20 < this.y + 10 && player1.x + 20 > this.x && player1.x < this.x + 20) { 
    player1.respawn(levelStartCoords.x,levelStartCoords.y); 
  }
};
sign.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(50, 30, 0)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(40, 24, 0)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillRect(this.x, this.y+10, 10, 10);
  }
  if (player1.x > this.x + 10 && player1.x < this.x + 20 && player1.y + 19 > this.y && player1.y < this.y + 19) {
    bannerText(this.txt,this.x,this.y);
  }
  else if(player1.x + 20 > this.x && player1.x + 20 < this.x + 10 && player1.y + 19 > this.y && player1.y < this.y + 19) { 
    bannerText(this.txt,this.x,this.y);
  }
  else if(player1.y < this.y + 20 && player1.y > this.y + 10 && player1.x + 20 > this.x && player1.x < this.x + 20) { 
    bannerText(this.txt,this.x,this.y);
  }
  else if(player1.y + 20 > this.y && player1.y + 20 < this.y + 10 && player1.x + 20 > this.x && player1.x < this.x + 20) { 
    bannerText(this.txt,this.x,this.y);
  }
  else if(player1.x>this.x-20&&player1.x<this.x+20&&player1.y>this.y-20&&player1.y<this.y+20){
    bannerText(this.txt,this.x,this.y);
  }
};
goal.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(0, 200, 100)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(0, 200, 130)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(0, 200, 100)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if (player1.x > this.x + 10 && player1.x < this.x + 20 && player1.y + 19 > this.y && player1.y < this.y + 19&&levelNum===levelNum2) {
    levelNum++; 
  }
  if(player1.x + 20 > this.x && player1.x + 20 < this.x + 10 && player1.y + 19 > this.y && player1.y < this.y + 19&&levelNum===levelNum2) { 
    levelNum++;
  }
  if(player1.y < this.y + 20 && player1.y > this.y + 10 && player1.x + 20 > this.x && player1.x < this.x + 20&&levelNum===levelNum2) { 
    levelNum++;
  }
  if(player1.y + 20 > this.y && player1.y + 20 < this.y + 10 && player1.x + 20 > this.x && player1.x < this.x + 20&&levelNum===levelNum2) { 
    levelNum++; 
  }
};
trampoline.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(20, 65, 65)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(18, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(12, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(17, 65, 65)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(player1.y + 20 > this.y && player1.y < this.y + 21 && player1.x +20 > this.x && player1.x < this.x + 20) { 
    player1.acceleration =Math.abs(player1.acceleration)*-1.025;
    player1.jumping = true; 
  }
};
supply.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(150, 0, 0)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgb(200, 200, 200)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
  }
  if(player1.y < this.y + 20 && player1.y > this.y + 20 && player1.x + 20 > this.x && player1.x < this.x + 20&&player1.acceleration<0) { 
    player1.ammo=50;
    player1.hp=20;
  }
  if(player1.y + 20 > this.y && player1.y + 19 < this.y + 10 && player1.x + 17 > this.x && player1.x < this.x + 17) { 
    player1.ammo=50;
    player1.hp=20;
  }
  if (player1.x > this.x + 10 && player1.x < this.x + 20 && player1.y + 19 > this.y && player1.y < this.y + 19) {
    player1.ammo=50;
    player1.hp=20;
  }
  if(player1.x + 20 > this.x && player1.x + 20 < this.x + 10 && player1.y + 19 > this.y && player1.y < this.y + 19) { 
    player1.ammo=50;
    player1.hp=20;
  }
};
wall.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(70, 70, 70)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(58, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(62, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(67, 67, 67)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
    ctx.fillStyle='rgba(0,0,0,50)';
    ctx.fillRect(this.x,this.y,20,20);
  }
  if(this.t===1){
    ctx.fillStyle='rgb(230, 240, 240)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(240, 245, 245)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(240, 250, 250)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===2){
    ctx.fillStyle='rgb(167, 132, 20)';
    ctx.fillRect(this.x, this.y, 20, 10);
    ctx.fillStyle='rgb(166, 127, 0)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(175, 134, 20)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===3){
    ctx.fillStyle='rgb(165, 123, 0)';
    ctx.fillRect(this.x, this.y, 20, 10);
    ctx.fillStyle='rgb(175, 134, 20)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(166, 127, 0)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  ctx.fillStyle='rgba(50,50,50,0.30)';
  ctx.fillRect(this.x,this.y,20,20);
}
block.prototype.display = function() { 
  if(this.t===0){
    ctx.fillStyle='rgb(70, 70, 70)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(58, 58, 58)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(62, 62, 62)';
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(67, 67, 67)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===1){
    ctx.fillStyle='rgb(230, 240, 240)';
    ctx.fillRect(this.x, this.y, 10, 10);
    ctx.fillStyle='rgb(240, 245, 245)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillRect(this.x+10, this.y, 10, 10);
    ctx.fillStyle='rgb(240, 250, 250)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===2){
    ctx.fillStyle='rgb(167, 132, 20)';
    ctx.fillRect(this.x, this.y, 20, 10);
    ctx.fillStyle='rgb(166, 127, 0)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(175, 134, 20)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(this.t===3){
    ctx.fillStyle='rgb(163, 120, 0)';
    ctx.fillRect(this.x, this.y, 20, 10);
    ctx.fillStyle='rgb(175, 134, 20)';
    ctx.fillRect(this.x, this.y+10, 10, 10);
    ctx.fillStyle='rgb(166, 127, 0)';
    ctx.fillRect(this.x+10, this.y+10, 10, 10);
  }
  if(player1.y < this.y + 20 && player1.y > this.y + 10 && player1.x + 20 > this.x && player1.x < this.x + 20&&player1.acceleration<0) { 
    player1.y = this.y + 20;
    player1.acceleration = 0;
  }
  if(player1.y + 20 > this.y && player1.y + 19 < this.y + 10 && player1.x + 17 > this.x && player1.x < this.x + 17) { 
    player1.y = this.y - 20;
    player1.acceleration = 0;
    player1.jumping = false; 
  }
  if (player1.x > this.x + 10 && player1.x < this.x + 20 && player1.y + 19 > this.y && player1.y < this.y + 19) {
    player1.x = this.x + 20; 
  }
  if(player1.x + 20 > this.x && player1.x + 20 < this.x + 10 && player1.y + 19 > this.y && player1.y < this.y + 19) { 
    player1.x = this.x - 20; 
  }
};
var reload=function(a){
  blocks = [];
  for (var y = 0;y < level.length; y++) {
    for (var x = 0;x < level[y].length; x++) {
      isBlock[y][x]=false;
      if (level[y][x]==="1") { 
        blocks.push(new block(x*20,y*20,0)); 
        isBlock[y][x]=true;
      }else if(level[y][x]==="2"){
        blocks.push(new block(x*20,y*20,1));
        isBlock[y][x]=true;
      }else if(level[y][x]==="l"){
        blocks.push(new lava(x*20,y*20,0));
        isBlock[y][x]=true;
      }else if(level[y][x]==="g"){
        blocks.push(new goal(x*20,y*20,0));
        isBlock[y][x]=true;
      }else if(level[y][x]==="3"){
        blocks.push(new block(x*20,y*20,2));
        isBlock[y][x]=true;
      }else if(level[y][x]==="4"){
        blocks.push(new block(x*20,y*20,3));
        isBlock[y][x]=true;
      }else if(level[y][x]==="-"){
        blocks.push(new wall(x*20,y*20,0));
      }else if(level[y][x]==="_"){
        blocks.push(new wall(x*20,y*20,1));
      }else if(level[y][x]===","){
        blocks.push(new wall(x*20,y*20,2));
      }else if(level[y][x]==="."){
        blocks.push(new wall(x*20,y*20,3));
      }else if(level[y][x]==="t"){
        blocks.push(new trampoline(x*20,y*20,0));
        isBlock[y][x]=true;
      }else if(level[y][x]==="s"){
        blocks.push(new supply(x*20,y*20,0));
      }
    }
  }
  levelFunctions[levelNum]();
  if(isNaN(a)){
    player1.x=levelStartCoords.x;
    player1.y=levelStartCoords.y;
    player1.acceleration = 0;
  }
}
reload();
var levelNum2=levelNum;
draw = function() { 
  var canvas = document.getElementById('canvas');
  var ctx = canvas.getContext('2d');
  if(levelNum!==levelNum2){
    if(!cloudLevel){
    level=levels[levelNum];
  }else{
    level=cloudLevels[levelNum];
  }
  levelStartCoords.x=startCoords[levelNum].x;
  levelStartCoords.y=startCoords[levelNum].y;
    levelNum2=levelNum;
    reload();
  }
  if(cloudLevel2!==cloudLevel){
    cloudLevel2=cloudLevel;
   if(cloudLevel){ level=cloudLevels[levelNum];
                 }else{
                   level=levels[levelNum];
                 }
    reload(1);
  }
  if(height===0){
    ctx.clearRect(0,0,canvas.width,canvas.height);
  }else{
    ctx.clearRect(0,0,canvas.width,canvas.height);
  }
  for (var i = 0;i < blocks.length; i++) {
    blocks[i].display();
  }
  player1.display();
  ctx.font = '10px sans-serif';
  ctx.fillText(levelNum,2,10);
  timer++;
  window.requestAnimationFrame(draw);
};
window.requestAnimationFrame(draw);
